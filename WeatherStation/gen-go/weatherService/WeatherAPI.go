// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package weatherService

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
  "git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//This Enum defines different weather warnings the system can return when a warning is requested
type WeatherWarning int64
const (
  WeatherWarning_NONE WeatherWarning = 0
  WeatherWarning_BLIZZARD WeatherWarning = 1
  WeatherWarning_FLOOD WeatherWarning = 2
  WeatherWarning_HURRICANE WeatherWarning = 3
  WeatherWarning_STORM WeatherWarning = 4
  WeatherWarning_TORNADO WeatherWarning = 5
  WeatherWarning_UV WeatherWarning = 6
)

func (p WeatherWarning) String() string {
  switch p {
  case WeatherWarning_NONE: return "NONE"
  case WeatherWarning_BLIZZARD: return "BLIZZARD"
  case WeatherWarning_FLOOD: return "FLOOD"
  case WeatherWarning_HURRICANE: return "HURRICANE"
  case WeatherWarning_STORM: return "STORM"
  case WeatherWarning_TORNADO: return "TORNADO"
  case WeatherWarning_UV: return "UV"
  }
  return "<UNSET>"
}

func WeatherWarningFromString(s string) (WeatherWarning, error) {
  switch s {
  case "NONE": return WeatherWarning_NONE, nil 
  case "BLIZZARD": return WeatherWarning_BLIZZARD, nil 
  case "FLOOD": return WeatherWarning_FLOOD, nil 
  case "HURRICANE": return WeatherWarning_HURRICANE, nil 
  case "STORM": return WeatherWarning_STORM, nil 
  case "TORNADO": return WeatherWarning_TORNADO, nil 
  case "UV": return WeatherWarning_UV, nil 
  }
  return WeatherWarning(0), fmt.Errorf("not a valid WeatherWarning string")
}


func WeatherWarningPtr(v WeatherWarning) *WeatherWarning { return &v }

func (p WeatherWarning) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *WeatherWarning) UnmarshalText(text []byte) error {
q, err := WeatherWarningFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *WeatherWarning) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = WeatherWarning(v)
return nil
}

func (p * WeatherWarning) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//This Enum is used to send different system warnings
type SystemWarning int64
const (
  SystemWarning_SHUTDOWN SystemWarning = 1
  SystemWarning_BATTERY_LOW SystemWarning = 2
  SystemWarning_NETWORK_UNSTABLE SystemWarning = 3
  SystemWarning_INTERNAL_FAILURE SystemWarning = 4
  SystemWarning_EXTERNAL_FAILURE SystemWarning = 5
)

func (p SystemWarning) String() string {
  switch p {
  case SystemWarning_SHUTDOWN: return "SHUTDOWN"
  case SystemWarning_BATTERY_LOW: return "BATTERY_LOW"
  case SystemWarning_NETWORK_UNSTABLE: return "NETWORK_UNSTABLE"
  case SystemWarning_INTERNAL_FAILURE: return "INTERNAL_FAILURE"
  case SystemWarning_EXTERNAL_FAILURE: return "EXTERNAL_FAILURE"
  }
  return "<UNSET>"
}

func SystemWarningFromString(s string) (SystemWarning, error) {
  switch s {
  case "SHUTDOWN": return SystemWarning_SHUTDOWN, nil 
  case "BATTERY_LOW": return SystemWarning_BATTERY_LOW, nil 
  case "NETWORK_UNSTABLE": return SystemWarning_NETWORK_UNSTABLE, nil 
  case "INTERNAL_FAILURE": return SystemWarning_INTERNAL_FAILURE, nil 
  case "EXTERNAL_FAILURE": return SystemWarning_EXTERNAL_FAILURE, nil 
  }
  return SystemWarning(0), fmt.Errorf("not a valid SystemWarning string")
}


func SystemWarningPtr(v SystemWarning) *SystemWarning { return &v }

func (p SystemWarning) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SystemWarning) UnmarshalText(text []byte) error {
q, err := SystemWarningFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SystemWarning) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SystemWarning(v)
return nil
}

func (p * SystemWarning) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Report int64
const (
  Report_SUNNY Report = 1
  Report_CLOUDY Report = 2
  Report_RAINY Report = 3
  Report_SNOW Report = 4
)

func (p Report) String() string {
  switch p {
  case Report_SUNNY: return "SUNNY"
  case Report_CLOUDY: return "CLOUDY"
  case Report_RAINY: return "RAINY"
  case Report_SNOW: return "SNOW"
  }
  return "<UNSET>"
}

func ReportFromString(s string) (Report, error) {
  switch s {
  case "SUNNY": return Report_SUNNY, nil 
  case "CLOUDY": return Report_CLOUDY, nil 
  case "RAINY": return Report_RAINY, nil 
  case "SNOW": return Report_SNOW, nil 
  }
  return Report(0), fmt.Errorf("not a valid Report string")
}


func ReportPtr(v Report) *Report { return &v }

func (p Report) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Report) UnmarshalText(text []byte) error {
q, err := ReportFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Report) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Report(v)
return nil
}

func (p * Report) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Thrift doesn't give us a date time type, so we leverage ISO 8601.
//Example date time: "2019-04-18T08:35:17+00:00"
type DateTime string

func DateTimePtr(v DateTime) *DateTime { return &v }

// This Struct defines a Location in the Real world.
// 
// Attributes:
//  - LocationID
//  - Name
//  - Latitude
//  - Longitude
//  - Description
type Location struct {
  LocationID int16 `thrift:"locationID,1" db:"locationID" json:"locationID"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"longitude"`
  Description *string `thrift:"description,5" db:"description" json:"description,omitempty"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetLocationID() int16 {
  return p.LocationID
}

func (p *Location) GetName() string {
  return p.Name
}

func (p *Location) GetLatitude() float64 {
  return p.Latitude
}

func (p *Location) GetLongitude() float64 {
  return p.Longitude
}
var Location_Description_DEFAULT string
func (p *Location) GetDescription() string {
  if !p.IsSetDescription() {
    return Location_Description_DEFAULT
  }
return *p.Description
}
func (p *Location) IsSetDescription() bool {
  return p.Description != nil
}

func (p *Location) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LocationID = v
}
  return nil
}

func (p *Location)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Location)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Location)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Location)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locationID", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:locationID: ", p), err) }
  if err := oprot.WriteI16(int16(p.LocationID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locationID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:locationID: ", p), err) }
  return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *Location) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *Location) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err) }
  }
  return err
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

// WeatherReport definiton.
// Attention Values will be checked and has to be in a natural range.
// 
// Attributes:
//  - Report
//  - Location
//  - Temperature
//  - Humidity
//  - WindStrength
//  - Rainfall
//  - Atmosphericpressure
//  - WindDirection
//  - DateTime
type WeatherReport struct {
  Report Report `thrift:"report,1" db:"report" json:"report"`
  Location *Location `thrift:"location,2" db:"location" json:"location"`
  Temperature float64 `thrift:"temperature,3" db:"temperature" json:"temperature"`
  Humidity int16 `thrift:"humidity,4" db:"humidity" json:"humidity"`
  WindStrength int16 `thrift:"windStrength,5" db:"windStrength" json:"windStrength"`
  Rainfall float64 `thrift:"rainfall,6" db:"rainfall" json:"rainfall"`
  Atmosphericpressure int16 `thrift:"atmosphericpressure,7" db:"atmosphericpressure" json:"atmosphericpressure"`
  WindDirection int16 `thrift:"windDirection,8" db:"windDirection" json:"windDirection"`
  DateTime string `thrift:"dateTime,9" db:"dateTime" json:"dateTime"`
}

func NewWeatherReport() *WeatherReport {
  return &WeatherReport{}
}


func (p *WeatherReport) GetReport() Report {
  return p.Report
}
var WeatherReport_Location_DEFAULT *Location
func (p *WeatherReport) GetLocation() *Location {
  if !p.IsSetLocation() {
    return WeatherReport_Location_DEFAULT
  }
return p.Location
}

func (p *WeatherReport) GetTemperature() float64 {
  return p.Temperature
}

func (p *WeatherReport) GetHumidity() int16 {
  return p.Humidity
}

func (p *WeatherReport) GetWindStrength() int16 {
  return p.WindStrength
}

func (p *WeatherReport) GetRainfall() float64 {
  return p.Rainfall
}

func (p *WeatherReport) GetAtmosphericpressure() int16 {
  return p.Atmosphericpressure
}

func (p *WeatherReport) GetWindDirection() int16 {
  return p.WindDirection
}

func (p *WeatherReport) GetDateTime() string {
  return p.DateTime
}
func (p *WeatherReport) IsSetLocation() bool {
  return p.Location != nil
}

func (p *WeatherReport) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherReport)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Report(v)
  p.Report = temp
}
  return nil
}

func (p *WeatherReport)  ReadField2(iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *WeatherReport)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Temperature = v
}
  return nil
}

func (p *WeatherReport)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Humidity = v
}
  return nil
}

func (p *WeatherReport)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WindStrength = v
}
  return nil
}

func (p *WeatherReport)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Rainfall = v
}
  return nil
}

func (p *WeatherReport)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Atmosphericpressure = v
}
  return nil
}

func (p *WeatherReport)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.WindDirection = v
}
  return nil
}

func (p *WeatherReport)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DateTime = v
}
  return nil
}

func (p *WeatherReport) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WeatherReport"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherReport) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("report", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:report: ", p), err) }
  if err := oprot.WriteI32(int32(p.Report)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.report (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:report: ", p), err) }
  return err
}

func (p *WeatherReport) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err) }
  if err := p.Location.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err) }
  return err
}

func (p *WeatherReport) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:temperature: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Temperature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.temperature (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:temperature: ", p), err) }
  return err
}

func (p *WeatherReport) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("humidity", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:humidity: ", p), err) }
  if err := oprot.WriteI16(int16(p.Humidity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.humidity (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:humidity: ", p), err) }
  return err
}

func (p *WeatherReport) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("windStrength", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:windStrength: ", p), err) }
  if err := oprot.WriteI16(int16(p.WindStrength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.windStrength (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:windStrength: ", p), err) }
  return err
}

func (p *WeatherReport) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rainfall", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rainfall: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Rainfall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rainfall (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rainfall: ", p), err) }
  return err
}

func (p *WeatherReport) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("atmosphericpressure", thrift.I16, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:atmosphericpressure: ", p), err) }
  if err := oprot.WriteI16(int16(p.Atmosphericpressure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.atmosphericpressure (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:atmosphericpressure: ", p), err) }
  return err
}

func (p *WeatherReport) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("windDirection", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:windDirection: ", p), err) }
  if err := oprot.WriteI16(int16(p.WindDirection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.windDirection (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:windDirection: ", p), err) }
  return err
}

func (p *WeatherReport) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dateTime", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dateTime: ", p), err) }
  if err := oprot.WriteString(string(p.DateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dateTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dateTime: ", p), err) }
  return err
}

func (p *WeatherReport) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherReport(%+v)", *p)
}

// This Exception gets thrown when the server does not know about the user.
// 
// Attributes:
//  - SessionToken
//  - Why
type UnknownUserException struct {
  SessionToken int64 `thrift:"SessionToken,1" db:"SessionToken" json:"SessionToken"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewUnknownUserException() *UnknownUserException {
  return &UnknownUserException{}
}


func (p *UnknownUserException) GetSessionToken() int64 {
  return p.SessionToken
}

func (p *UnknownUserException) GetWhy() string {
  return p.Why
}
func (p *UnknownUserException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownUserException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionToken = v
}
  return nil
}

func (p *UnknownUserException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *UnknownUserException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnknownUserException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownUserException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SessionToken", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SessionToken: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SessionToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SessionToken: ", p), err) }
  return err
}

func (p *UnknownUserException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *UnknownUserException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownUserException(%+v)", *p)
}

func (p *UnknownUserException) Error() string {
  return p.String()
}

// This Exception gets thrown when a unknown Location is passed to the server.
// 
// Attributes:
//  - Location
//  - Why
type LocationException struct {
  Location *Location `thrift:"location,1" db:"location" json:"location"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewLocationException() *LocationException {
  return &LocationException{}
}

var LocationException_Location_DEFAULT *Location
func (p *LocationException) GetLocation() *Location {
  if !p.IsSetLocation() {
    return LocationException_Location_DEFAULT
  }
return p.Location
}

func (p *LocationException) GetWhy() string {
  return p.Why
}
func (p *LocationException) IsSetLocation() bool {
  return p.Location != nil
}

func (p *LocationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LocationException)  ReadField1(iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *LocationException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *LocationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LocationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LocationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err) }
  if err := p.Location.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err) }
  return err
}

func (p *LocationException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *LocationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LocationException(%+v)", *p)
}

func (p *LocationException) Error() string {
  return p.String()
}

// This Exception gets thrown when a wrong report is send to the system.
// 
// Attributes:
//  - Report
//  - Why
type ReportException struct {
  Report Report `thrift:"report,1" db:"report" json:"report"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewReportException() *ReportException {
  return &ReportException{}
}


func (p *ReportException) GetReport() Report {
  return p.Report
}

func (p *ReportException) GetWhy() string {
  return p.Why
}
func (p *ReportException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Report(v)
  p.Report = temp
}
  return nil
}

func (p *ReportException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *ReportException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("report", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:report: ", p), err) }
  if err := oprot.WriteI32(int32(p.Report)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.report (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:report: ", p), err) }
  return err
}

func (p *ReportException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *ReportException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportException(%+v)", *p)
}

func (p *ReportException) Error() string {
  return p.String()
}

// This Exception gets thrown when a wrong report is send to the system.
// 
// Attributes:
//  - Time
//  - Why
type DateException struct {
  Time string `thrift:"time,1" db:"time" json:"time"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewDateException() *DateException {
  return &DateException{}
}


func (p *DateException) GetTime() string {
  return p.Time
}

func (p *DateException) GetWhy() string {
  return p.Why
}
func (p *DateException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DateException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *DateException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *DateException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DateException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DateException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:time: ", p), err) }
  if err := oprot.WriteString(string(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:time: ", p), err) }
  return err
}

func (p *DateException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *DateException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DateException(%+v)", *p)
}

func (p *DateException) Error() string {
  return p.String()
}

type Weather interface {  //Weather service definition

  // Parameters:
  //  - Location
  Login(ctx context.Context, location *Location) (r int64, err error)
  // Parameters:
  //  - SessionToken
  Logout(ctx context.Context, sessionToken int64) (r bool, err error)
  // Parameters:
  //  - Report
  //  - SessionToken
  SendWeatherReport(ctx context.Context, report *WeatherReport, sessionToken int64) (r bool, err error)
  // Parameters:
  //  - UserId
  //  - Time
  ReceiveForecastFor(ctx context.Context, userId int64, time DateTime) (r *WeatherReport, err error)
  // Parameters:
  //  - UserId
  CheckWeatherWarnings(ctx context.Context, userId int64) (r WeatherWarning, err error)
  // Parameters:
  //  - SystemWarning
  //  - UserId
  SendWarning(ctx context.Context, systemWarning SystemWarning, userId int64) (r bool, err error)
}

//Weather service definition
type WeatherClient struct {
  c thrift.TClient
}

func NewWeatherClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WeatherClient {
  return &WeatherClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewWeatherClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WeatherClient {
  return &WeatherClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewWeatherClient(c thrift.TClient) *WeatherClient {
  return &WeatherClient{
    c: c,
  }
}

func (p *WeatherClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Location
func (p *WeatherClient) Login(ctx context.Context, location *Location) (r int64, err error) {
  var _args0 WeatherLoginArgs
  _args0.Location = location
  var _result1 WeatherLoginResult
  if err = p.Client_().Call(ctx, "login", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.LocationException!= nil:
    return r, _result1.LocationException
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - SessionToken
func (p *WeatherClient) Logout(ctx context.Context, sessionToken int64) (r bool, err error) {
  var _args2 WeatherLogoutArgs
  _args2.SessionToken = sessionToken
  var _result3 WeatherLogoutResult
  if err = p.Client_().Call(ctx, "logout", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.UnknownUserException!= nil:
    return r, _result3.UnknownUserException
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Report
//  - SessionToken
func (p *WeatherClient) SendWeatherReport(ctx context.Context, report *WeatherReport, sessionToken int64) (r bool, err error) {
  var _args4 WeatherSendWeatherReportArgs
  _args4.Report = report
  _args4.SessionToken = sessionToken
  var _result5 WeatherSendWeatherReportResult
  if err = p.Client_().Call(ctx, "sendWeatherReport", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.UnknownUserException!= nil:
    return r, _result5.UnknownUserException
  case _result5.ReportException!= nil:
    return r, _result5.ReportException
  case _result5.DateException!= nil:
    return r, _result5.DateException
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - Time
func (p *WeatherClient) ReceiveForecastFor(ctx context.Context, userId int64, time DateTime) (r *WeatherReport, err error) {
  var _args6 WeatherReceiveForecastForArgs
  _args6.UserId = userId
  _args6.Time = time
  var _result7 WeatherReceiveForecastForResult
  if err = p.Client_().Call(ctx, "receiveForecastFor", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.UnknownUserException!= nil:
    return r, _result7.UnknownUserException
  case _result7.DateException!= nil:
    return r, _result7.DateException
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *WeatherClient) CheckWeatherWarnings(ctx context.Context, userId int64) (r WeatherWarning, err error) {
  var _args8 WeatherCheckWeatherWarningsArgs
  _args8.UserId = userId
  var _result9 WeatherCheckWeatherWarningsResult
  if err = p.Client_().Call(ctx, "checkWeatherWarnings", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.UnknownUserException!= nil:
    return r, _result9.UnknownUserException
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - SystemWarning
//  - UserId
func (p *WeatherClient) SendWarning(ctx context.Context, systemWarning SystemWarning, userId int64) (r bool, err error) {
  var _args10 WeatherSendWarningArgs
  _args10.SystemWarning = systemWarning
  _args10.UserId = userId
  var _result11 WeatherSendWarningResult
  if err = p.Client_().Call(ctx, "sendWarning", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.UnknownUserException!= nil:
    return r, _result11.UnknownUserException
  }

  return _result11.GetSuccess(), nil
}

type WeatherProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Weather
}

func (p *WeatherProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WeatherProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WeatherProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWeatherProcessor(handler Weather) *WeatherProcessor {

  self12 := &WeatherProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["login"] = &weatherProcessorLogin{handler:handler}
  self12.processorMap["logout"] = &weatherProcessorLogout{handler:handler}
  self12.processorMap["sendWeatherReport"] = &weatherProcessorSendWeatherReport{handler:handler}
  self12.processorMap["receiveForecastFor"] = &weatherProcessorReceiveForecastFor{handler:handler}
  self12.processorMap["checkWeatherWarnings"] = &weatherProcessorCheckWeatherWarnings{handler:handler}
  self12.processorMap["sendWarning"] = &weatherProcessorSendWarning{handler:handler}
return self12
}

func (p *WeatherProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type weatherProcessorLogin struct {
  handler Weather
}

func (p *weatherProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WeatherLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WeatherLoginResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.Login(ctx, args.Location); err2 != nil {
  switch v := err2.(type) {
    case *LocationException:
  result.LocationException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: " + err2.Error())
    oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type weatherProcessorLogout struct {
  handler Weather
}

func (p *weatherProcessorLogout) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WeatherLogoutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WeatherLogoutResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Logout(ctx, args.SessionToken); err2 != nil {
  switch v := err2.(type) {
    case *UnknownUserException:
  result.UnknownUserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logout: " + err2.Error())
    oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("logout", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type weatherProcessorSendWeatherReport struct {
  handler Weather
}

func (p *weatherProcessorSendWeatherReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WeatherSendWeatherReportArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendWeatherReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WeatherSendWeatherReportResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SendWeatherReport(ctx, args.Report, args.SessionToken); err2 != nil {
  switch v := err2.(type) {
    case *UnknownUserException:
  result.UnknownUserException = v
    case *ReportException:
  result.ReportException = v
    case *DateException:
  result.DateException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendWeatherReport: " + err2.Error())
    oprot.WriteMessageBegin("sendWeatherReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sendWeatherReport", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type weatherProcessorReceiveForecastFor struct {
  handler Weather
}

func (p *weatherProcessorReceiveForecastFor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WeatherReceiveForecastForArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("receiveForecastFor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WeatherReceiveForecastForResult{}
var retval *WeatherReport
  var err2 error
  if retval, err2 = p.handler.ReceiveForecastFor(ctx, args.UserId, args.Time); err2 != nil {
  switch v := err2.(type) {
    case *UnknownUserException:
  result.UnknownUserException = v
    case *DateException:
  result.DateException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing receiveForecastFor: " + err2.Error())
    oprot.WriteMessageBegin("receiveForecastFor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("receiveForecastFor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type weatherProcessorCheckWeatherWarnings struct {
  handler Weather
}

func (p *weatherProcessorCheckWeatherWarnings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WeatherCheckWeatherWarningsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkWeatherWarnings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WeatherCheckWeatherWarningsResult{}
var retval WeatherWarning
  var err2 error
  if retval, err2 = p.handler.CheckWeatherWarnings(ctx, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *UnknownUserException:
  result.UnknownUserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkWeatherWarnings: " + err2.Error())
    oprot.WriteMessageBegin("checkWeatherWarnings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("checkWeatherWarnings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type weatherProcessorSendWarning struct {
  handler Weather
}

func (p *weatherProcessorSendWarning) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WeatherSendWarningArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendWarning", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WeatherSendWarningResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SendWarning(ctx, args.SystemWarning, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *UnknownUserException:
  result.UnknownUserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendWarning: " + err2.Error())
    oprot.WriteMessageBegin("sendWarning", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sendWarning", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Location
type WeatherLoginArgs struct {
  Location *Location `thrift:"location,1" db:"location" json:"location"`
}

func NewWeatherLoginArgs() *WeatherLoginArgs {
  return &WeatherLoginArgs{}
}

var WeatherLoginArgs_Location_DEFAULT *Location
func (p *WeatherLoginArgs) GetLocation() *Location {
  if !p.IsSetLocation() {
    return WeatherLoginArgs_Location_DEFAULT
  }
return p.Location
}
func (p *WeatherLoginArgs) IsSetLocation() bool {
  return p.Location != nil
}

func (p *WeatherLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *WeatherLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err) }
  if err := p.Location.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err) }
  return err
}

func (p *WeatherLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - LocationException
type WeatherLoginResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  LocationException *LocationException `thrift:"locationException,1" db:"locationException" json:"locationException,omitempty"`
}

func NewWeatherLoginResult() *WeatherLoginResult {
  return &WeatherLoginResult{}
}

var WeatherLoginResult_Success_DEFAULT int64
func (p *WeatherLoginResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return WeatherLoginResult_Success_DEFAULT
  }
return *p.Success
}
var WeatherLoginResult_LocationException_DEFAULT *LocationException
func (p *WeatherLoginResult) GetLocationException() *LocationException {
  if !p.IsSetLocationException() {
    return WeatherLoginResult_LocationException_DEFAULT
  }
return p.LocationException
}
func (p *WeatherLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WeatherLoginResult) IsSetLocationException() bool {
  return p.LocationException != nil
}

func (p *WeatherLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WeatherLoginResult)  ReadField1(iprot thrift.TProtocol) error {
  p.LocationException = &LocationException{}
  if err := p.LocationException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocationException), err)
  }
  return nil
}

func (p *WeatherLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WeatherLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocationException() {
    if err := oprot.WriteFieldBegin("locationException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:locationException: ", p), err) }
    if err := p.LocationException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocationException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:locationException: ", p), err) }
  }
  return err
}

func (p *WeatherLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherLoginResult(%+v)", *p)
}

// Attributes:
//  - SessionToken
type WeatherLogoutArgs struct {
  SessionToken int64 `thrift:"sessionToken,1" db:"sessionToken" json:"sessionToken"`
}

func NewWeatherLogoutArgs() *WeatherLogoutArgs {
  return &WeatherLogoutArgs{}
}


func (p *WeatherLogoutArgs) GetSessionToken() int64 {
  return p.SessionToken
}
func (p *WeatherLogoutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherLogoutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionToken = v
}
  return nil
}

func (p *WeatherLogoutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("logout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherLogoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionToken", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionToken: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionToken: ", p), err) }
  return err
}

func (p *WeatherLogoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherLogoutArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UnknownUserException
type WeatherLogoutResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  UnknownUserException *UnknownUserException `thrift:"unknownUserException,1" db:"unknownUserException" json:"unknownUserException,omitempty"`
}

func NewWeatherLogoutResult() *WeatherLogoutResult {
  return &WeatherLogoutResult{}
}

var WeatherLogoutResult_Success_DEFAULT bool
func (p *WeatherLogoutResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return WeatherLogoutResult_Success_DEFAULT
  }
return *p.Success
}
var WeatherLogoutResult_UnknownUserException_DEFAULT *UnknownUserException
func (p *WeatherLogoutResult) GetUnknownUserException() *UnknownUserException {
  if !p.IsSetUnknownUserException() {
    return WeatherLogoutResult_UnknownUserException_DEFAULT
  }
return p.UnknownUserException
}
func (p *WeatherLogoutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WeatherLogoutResult) IsSetUnknownUserException() bool {
  return p.UnknownUserException != nil
}

func (p *WeatherLogoutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherLogoutResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WeatherLogoutResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UnknownUserException = &UnknownUserException{}
  if err := p.UnknownUserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownUserException), err)
  }
  return nil
}

func (p *WeatherLogoutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("logout_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherLogoutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WeatherLogoutResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownUserException() {
    if err := oprot.WriteFieldBegin("unknownUserException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unknownUserException: ", p), err) }
    if err := p.UnknownUserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownUserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unknownUserException: ", p), err) }
  }
  return err
}

func (p *WeatherLogoutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherLogoutResult(%+v)", *p)
}

// Attributes:
//  - Report
//  - SessionToken
type WeatherSendWeatherReportArgs struct {
  Report *WeatherReport `thrift:"report,1" db:"report" json:"report"`
  SessionToken int64 `thrift:"sessionToken,2" db:"sessionToken" json:"sessionToken"`
}

func NewWeatherSendWeatherReportArgs() *WeatherSendWeatherReportArgs {
  return &WeatherSendWeatherReportArgs{}
}

var WeatherSendWeatherReportArgs_Report_DEFAULT *WeatherReport
func (p *WeatherSendWeatherReportArgs) GetReport() *WeatherReport {
  if !p.IsSetReport() {
    return WeatherSendWeatherReportArgs_Report_DEFAULT
  }
return p.Report
}

func (p *WeatherSendWeatherReportArgs) GetSessionToken() int64 {
  return p.SessionToken
}
func (p *WeatherSendWeatherReportArgs) IsSetReport() bool {
  return p.Report != nil
}

func (p *WeatherSendWeatherReportArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherSendWeatherReportArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Report = &WeatherReport{}
  if err := p.Report.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Report), err)
  }
  return nil
}

func (p *WeatherSendWeatherReportArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionToken = v
}
  return nil
}

func (p *WeatherSendWeatherReportArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendWeatherReport_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherSendWeatherReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("report", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:report: ", p), err) }
  if err := p.Report.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Report), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:report: ", p), err) }
  return err
}

func (p *WeatherSendWeatherReportArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionToken", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionToken: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionToken: ", p), err) }
  return err
}

func (p *WeatherSendWeatherReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherSendWeatherReportArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UnknownUserException
//  - ReportException
//  - DateException
type WeatherSendWeatherReportResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  UnknownUserException *UnknownUserException `thrift:"unknownUserException,1" db:"unknownUserException" json:"unknownUserException,omitempty"`
  ReportException *ReportException `thrift:"reportException,2" db:"reportException" json:"reportException,omitempty"`
  DateException *DateException `thrift:"dateException,3" db:"dateException" json:"dateException,omitempty"`
}

func NewWeatherSendWeatherReportResult() *WeatherSendWeatherReportResult {
  return &WeatherSendWeatherReportResult{}
}

var WeatherSendWeatherReportResult_Success_DEFAULT bool
func (p *WeatherSendWeatherReportResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return WeatherSendWeatherReportResult_Success_DEFAULT
  }
return *p.Success
}
var WeatherSendWeatherReportResult_UnknownUserException_DEFAULT *UnknownUserException
func (p *WeatherSendWeatherReportResult) GetUnknownUserException() *UnknownUserException {
  if !p.IsSetUnknownUserException() {
    return WeatherSendWeatherReportResult_UnknownUserException_DEFAULT
  }
return p.UnknownUserException
}
var WeatherSendWeatherReportResult_ReportException_DEFAULT *ReportException
func (p *WeatherSendWeatherReportResult) GetReportException() *ReportException {
  if !p.IsSetReportException() {
    return WeatherSendWeatherReportResult_ReportException_DEFAULT
  }
return p.ReportException
}
var WeatherSendWeatherReportResult_DateException_DEFAULT *DateException
func (p *WeatherSendWeatherReportResult) GetDateException() *DateException {
  if !p.IsSetDateException() {
    return WeatherSendWeatherReportResult_DateException_DEFAULT
  }
return p.DateException
}
func (p *WeatherSendWeatherReportResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WeatherSendWeatherReportResult) IsSetUnknownUserException() bool {
  return p.UnknownUserException != nil
}

func (p *WeatherSendWeatherReportResult) IsSetReportException() bool {
  return p.ReportException != nil
}

func (p *WeatherSendWeatherReportResult) IsSetDateException() bool {
  return p.DateException != nil
}

func (p *WeatherSendWeatherReportResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherSendWeatherReportResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WeatherSendWeatherReportResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UnknownUserException = &UnknownUserException{}
  if err := p.UnknownUserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownUserException), err)
  }
  return nil
}

func (p *WeatherSendWeatherReportResult)  ReadField2(iprot thrift.TProtocol) error {
  p.ReportException = &ReportException{}
  if err := p.ReportException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportException), err)
  }
  return nil
}

func (p *WeatherSendWeatherReportResult)  ReadField3(iprot thrift.TProtocol) error {
  p.DateException = &DateException{}
  if err := p.DateException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateException), err)
  }
  return nil
}

func (p *WeatherSendWeatherReportResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendWeatherReport_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherSendWeatherReportResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WeatherSendWeatherReportResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownUserException() {
    if err := oprot.WriteFieldBegin("unknownUserException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unknownUserException: ", p), err) }
    if err := p.UnknownUserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownUserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unknownUserException: ", p), err) }
  }
  return err
}

func (p *WeatherSendWeatherReportResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetReportException() {
    if err := oprot.WriteFieldBegin("reportException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reportException: ", p), err) }
    if err := p.ReportException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reportException: ", p), err) }
  }
  return err
}

func (p *WeatherSendWeatherReportResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateException() {
    if err := oprot.WriteFieldBegin("dateException", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dateException: ", p), err) }
    if err := p.DateException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dateException: ", p), err) }
  }
  return err
}

func (p *WeatherSendWeatherReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherSendWeatherReportResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Time
type WeatherReceiveForecastForArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  Time DateTime `thrift:"time,2" db:"time" json:"time"`
}

func NewWeatherReceiveForecastForArgs() *WeatherReceiveForecastForArgs {
  return &WeatherReceiveForecastForArgs{}
}


func (p *WeatherReceiveForecastForArgs) GetUserId() int64 {
  return p.UserId
}

func (p *WeatherReceiveForecastForArgs) GetTime() DateTime {
  return p.Time
}
func (p *WeatherReceiveForecastForArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherReceiveForecastForArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *WeatherReceiveForecastForArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := DateTime(v)
  p.Time = temp
}
  return nil
}

func (p *WeatherReceiveForecastForArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("receiveForecastFor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherReceiveForecastForArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *WeatherReceiveForecastForArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time: ", p), err) }
  if err := oprot.WriteString(string(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time: ", p), err) }
  return err
}

func (p *WeatherReceiveForecastForArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherReceiveForecastForArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UnknownUserException
//  - DateException
type WeatherReceiveForecastForResult struct {
  Success *WeatherReport `thrift:"success,0" db:"success" json:"success,omitempty"`
  UnknownUserException *UnknownUserException `thrift:"unknownUserException,1" db:"unknownUserException" json:"unknownUserException,omitempty"`
  DateException *DateException `thrift:"dateException,2" db:"dateException" json:"dateException,omitempty"`
}

func NewWeatherReceiveForecastForResult() *WeatherReceiveForecastForResult {
  return &WeatherReceiveForecastForResult{}
}

var WeatherReceiveForecastForResult_Success_DEFAULT *WeatherReport
func (p *WeatherReceiveForecastForResult) GetSuccess() *WeatherReport {
  if !p.IsSetSuccess() {
    return WeatherReceiveForecastForResult_Success_DEFAULT
  }
return p.Success
}
var WeatherReceiveForecastForResult_UnknownUserException_DEFAULT *UnknownUserException
func (p *WeatherReceiveForecastForResult) GetUnknownUserException() *UnknownUserException {
  if !p.IsSetUnknownUserException() {
    return WeatherReceiveForecastForResult_UnknownUserException_DEFAULT
  }
return p.UnknownUserException
}
var WeatherReceiveForecastForResult_DateException_DEFAULT *DateException
func (p *WeatherReceiveForecastForResult) GetDateException() *DateException {
  if !p.IsSetDateException() {
    return WeatherReceiveForecastForResult_DateException_DEFAULT
  }
return p.DateException
}
func (p *WeatherReceiveForecastForResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WeatherReceiveForecastForResult) IsSetUnknownUserException() bool {
  return p.UnknownUserException != nil
}

func (p *WeatherReceiveForecastForResult) IsSetDateException() bool {
  return p.DateException != nil
}

func (p *WeatherReceiveForecastForResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherReceiveForecastForResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &WeatherReport{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WeatherReceiveForecastForResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UnknownUserException = &UnknownUserException{}
  if err := p.UnknownUserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownUserException), err)
  }
  return nil
}

func (p *WeatherReceiveForecastForResult)  ReadField2(iprot thrift.TProtocol) error {
  p.DateException = &DateException{}
  if err := p.DateException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateException), err)
  }
  return nil
}

func (p *WeatherReceiveForecastForResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("receiveForecastFor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherReceiveForecastForResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WeatherReceiveForecastForResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownUserException() {
    if err := oprot.WriteFieldBegin("unknownUserException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unknownUserException: ", p), err) }
    if err := p.UnknownUserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownUserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unknownUserException: ", p), err) }
  }
  return err
}

func (p *WeatherReceiveForecastForResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateException() {
    if err := oprot.WriteFieldBegin("dateException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dateException: ", p), err) }
    if err := p.DateException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dateException: ", p), err) }
  }
  return err
}

func (p *WeatherReceiveForecastForResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherReceiveForecastForResult(%+v)", *p)
}

// Attributes:
//  - UserId
type WeatherCheckWeatherWarningsArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewWeatherCheckWeatherWarningsArgs() *WeatherCheckWeatherWarningsArgs {
  return &WeatherCheckWeatherWarningsArgs{}
}


func (p *WeatherCheckWeatherWarningsArgs) GetUserId() int64 {
  return p.UserId
}
func (p *WeatherCheckWeatherWarningsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherCheckWeatherWarningsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *WeatherCheckWeatherWarningsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkWeatherWarnings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherCheckWeatherWarningsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *WeatherCheckWeatherWarningsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherCheckWeatherWarningsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UnknownUserException
type WeatherCheckWeatherWarningsResult struct {
  Success *WeatherWarning `thrift:"success,0" db:"success" json:"success,omitempty"`
  UnknownUserException *UnknownUserException `thrift:"unknownUserException,1" db:"unknownUserException" json:"unknownUserException,omitempty"`
}

func NewWeatherCheckWeatherWarningsResult() *WeatherCheckWeatherWarningsResult {
  return &WeatherCheckWeatherWarningsResult{}
}

var WeatherCheckWeatherWarningsResult_Success_DEFAULT WeatherWarning
func (p *WeatherCheckWeatherWarningsResult) GetSuccess() WeatherWarning {
  if !p.IsSetSuccess() {
    return WeatherCheckWeatherWarningsResult_Success_DEFAULT
  }
return *p.Success
}
var WeatherCheckWeatherWarningsResult_UnknownUserException_DEFAULT *UnknownUserException
func (p *WeatherCheckWeatherWarningsResult) GetUnknownUserException() *UnknownUserException {
  if !p.IsSetUnknownUserException() {
    return WeatherCheckWeatherWarningsResult_UnknownUserException_DEFAULT
  }
return p.UnknownUserException
}
func (p *WeatherCheckWeatherWarningsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WeatherCheckWeatherWarningsResult) IsSetUnknownUserException() bool {
  return p.UnknownUserException != nil
}

func (p *WeatherCheckWeatherWarningsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherCheckWeatherWarningsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := WeatherWarning(v)
  p.Success = &temp
}
  return nil
}

func (p *WeatherCheckWeatherWarningsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UnknownUserException = &UnknownUserException{}
  if err := p.UnknownUserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownUserException), err)
  }
  return nil
}

func (p *WeatherCheckWeatherWarningsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkWeatherWarnings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherCheckWeatherWarningsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WeatherCheckWeatherWarningsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownUserException() {
    if err := oprot.WriteFieldBegin("unknownUserException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unknownUserException: ", p), err) }
    if err := p.UnknownUserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownUserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unknownUserException: ", p), err) }
  }
  return err
}

func (p *WeatherCheckWeatherWarningsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherCheckWeatherWarningsResult(%+v)", *p)
}

// Attributes:
//  - SystemWarning
//  - UserId
type WeatherSendWarningArgs struct {
  SystemWarning SystemWarning `thrift:"systemWarning,1" db:"systemWarning" json:"systemWarning"`
  UserId int64 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewWeatherSendWarningArgs() *WeatherSendWarningArgs {
  return &WeatherSendWarningArgs{}
}


func (p *WeatherSendWarningArgs) GetSystemWarning() SystemWarning {
  return p.SystemWarning
}

func (p *WeatherSendWarningArgs) GetUserId() int64 {
  return p.UserId
}
func (p *WeatherSendWarningArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherSendWarningArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SystemWarning(v)
  p.SystemWarning = temp
}
  return nil
}

func (p *WeatherSendWarningArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *WeatherSendWarningArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendWarning_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherSendWarningArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemWarning", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemWarning: ", p), err) }
  if err := oprot.WriteI32(int32(p.SystemWarning)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemWarning (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemWarning: ", p), err) }
  return err
}

func (p *WeatherSendWarningArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *WeatherSendWarningArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherSendWarningArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UnknownUserException
type WeatherSendWarningResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  UnknownUserException *UnknownUserException `thrift:"unknownUserException,1" db:"unknownUserException" json:"unknownUserException,omitempty"`
}

func NewWeatherSendWarningResult() *WeatherSendWarningResult {
  return &WeatherSendWarningResult{}
}

var WeatherSendWarningResult_Success_DEFAULT bool
func (p *WeatherSendWarningResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return WeatherSendWarningResult_Success_DEFAULT
  }
return *p.Success
}
var WeatherSendWarningResult_UnknownUserException_DEFAULT *UnknownUserException
func (p *WeatherSendWarningResult) GetUnknownUserException() *UnknownUserException {
  if !p.IsSetUnknownUserException() {
    return WeatherSendWarningResult_UnknownUserException_DEFAULT
  }
return p.UnknownUserException
}
func (p *WeatherSendWarningResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WeatherSendWarningResult) IsSetUnknownUserException() bool {
  return p.UnknownUserException != nil
}

func (p *WeatherSendWarningResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WeatherSendWarningResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *WeatherSendWarningResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UnknownUserException = &UnknownUserException{}
  if err := p.UnknownUserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownUserException), err)
  }
  return nil
}

func (p *WeatherSendWarningResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendWarning_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WeatherSendWarningResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WeatherSendWarningResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownUserException() {
    if err := oprot.WriteFieldBegin("unknownUserException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unknownUserException: ", p), err) }
    if err := p.UnknownUserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownUserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unknownUserException: ", p), err) }
  }
  return err
}

func (p *WeatherSendWarningResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WeatherSendWarningResult(%+v)", *p)
}


